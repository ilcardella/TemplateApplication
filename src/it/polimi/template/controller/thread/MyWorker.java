package it.polimi.template.controller.thread;

import it.polimi.template.controller.MonitorPageController;
import it.polimi.template.model.Mission;
import it.polimi.template.model.editor.Clock;
import it.polimi.template.model.editor.DroneAllocator;
import it.polimi.template.model.editor.MissionCreator;
import it.polimi.template.model.editor.PriorityManager;
import it.polimi.template.model.editor.TripLauncher;
import it.polimi.template.model.editor.TripMonitor;

import javax.swing.SwingWorker;

public class MyWorker extends SwingWorker<Integer, String> {

	private MonitorPageController parent;
	private Mission m;
	
	//<dec>
	MissionCreator missioncreator = new MissionCreator();
	DroneAllocator droneallocator = new DroneAllocator();
	TripLauncher triplauncher = new TripLauncher();
	TripMonitor tripmonitor = new TripMonitor();

	public MyWorker(Mission mission, MonitorPageController parent) {
		this.m = mission;
		this.parent = parent;
	}

	@Override
	protected Integer doInBackground() throws Exception {
		missioncreator.addObserver(droneallocator);
		droneallocator.addObserver(triplauncher);
		triplauncher.addObserver(tripmonitor);
		tripmonitor.addObserver(droneallocator);
		missioncreator.update(null, m);
		
		return 4;
	}
	
//	 VECCHIA DOINBACKGROUND, SARÀ DA CANCELLARE
//	@Override
//	protected Integer doInBackground() throws Exception {
//		
//		// This part is generated by the graphical editor
//
//		m = mc.run(m);
//
//		parent.notifyUpdateOfStatus(m);
//
//		while (m.getStatus() != Mission.COMPLETED) {
//
//			// Nel caso del Clock
//			// viene sempre controllato se esiste un delay sul next trip
//			// se esiste si aspetta che sia passato il tempo
//			// altrimenti si continua normalmente
//			m = clk.run(m);
//			
//			parent.notifyUpdateOfStatus(m);
//			
//			m = da.run(m);
//
//			parent.notifyUpdateOfStatus(m);
//
//			m = tl.run(m);
//
//			parent.notifyUpdateOfStatus(m);
//
//			m = tm.run(m);
//
//			parent.notifyUpdateOfStatus(m);
//
//			if (m.getStatus() == Mission.FAILED)
//				
//				// Nel caso del Priority Manager
//				// viene inserita la missione 
//				// il pm cambia la priorit� e risetta gli stati
//				// il "break non serve pi� e si ritorna all'inizio del ciclo
//				m = pm.run(m);
//				// break;
//		}
//
//		return 42;
//	}

}
